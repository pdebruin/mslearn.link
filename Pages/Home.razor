@page "/"
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.QuickGrid 
@using BlazorApplicationInsights
@using BlazorApplicationInsights.Interfaces
@using BlazorApplicationInsights.Models
@using System.Web


<h1>Find your MS Learn link</h1>

<p>What link are you looking for?</p>

@if (links == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div >
        <input @bind-value="SearchText" @bind-value:event="oninput" placeholder="Search" />
    </div>

    <div class="table">
        <QuickGrid Items="@queryablelinks">
            <TemplateColumn Title="Title" Sortable="true" SortBy="@templateSort">
                    <img height="30" width="30" class="flag" src="@(context.Image)" />
                <a href="@context.Url" target="_blank">
                     @(context.Title)
                </a>
            </TemplateColumn>
            <PropertyColumn Property="@(p => p.Type)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Category)" Sortable="true" />
        </QuickGrid>
    </div>
}


@code {
    
    [Inject] private IApplicationInsights AppInsights { get; set; }

    private Link[]? links;
    GridSort<Link> templateSort = GridSort<Link>.ByAscending(p => p.Title);
    public string SearchText = "";

    protected override async Task OnInitializedAsync()
    {
        links = await Http.GetFromJsonAsync<Link[]>("data/links.json");
        await AppInsights.TrackEvent(new EventTelemetry() { Name = "Home initialized" });
    }

    Link[]? filteredlinks => links?.Where(
        f => f.Title?.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ?? false).ToArray();

    IQueryable<Link>? queryablelinks => filteredlinks?.AsQueryable();
}
